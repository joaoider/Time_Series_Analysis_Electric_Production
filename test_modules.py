"""
Teste simples dos m√≥dulos
"""

import sys
import importlib


def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    modules = [
        'config',
        'data_loader', 
        'data_analysis',
        'stationarity',
        'transformation',
        'models',
        'evaluation',
        'visualization'
    ]
    
    print("Testando importa√ß√£o dos m√≥dulos...")
    print("=" * 40)
    
    failed_imports = []
    
    for module_name in modules:
        try:
            importlib.import_module(module_name)
            print(f"‚úÖ {module_name}: OK")
        except ImportError as e:
            print(f"‚ùå {module_name}: ERRO - {e}")
            failed_imports.append(module_name)
        except Exception as e:
            print(f"‚ö†Ô∏è  {module_name}: AVISO - {e}")
    
    print("=" * 40)
    
    if failed_imports:
        print(f"\n‚ùå {len(failed_imports)} m√≥dulo(s) falharam na importa√ß√£o:")
        for module in failed_imports:
            print(f"  - {module}")
        return False
    else:
        print("\n‚úÖ Todos os m√≥dulos foram importados com sucesso!")
        return True


def test_basic_functionality():
    """Testa funcionalidade b√°sica dos m√≥dulos"""
    print("\nTestando funcionalidade b√°sica...")
    print("=" * 40)
    
    try:
        # Testar configura√ß√µes
        from config import ROLLING_WINDOW, TEST_SIZE
        print(f"‚úÖ Configura√ß√µes: ROLLING_WINDOW={ROLLING_WINDOW}, TEST_SIZE={TEST_SIZE}")
        
        # Testar carregador de dados
        from data_loader import DataLoader
        loader = DataLoader()
        print("‚úÖ DataLoader: Classe criada com sucesso")
        
        # Testar analisador de dados
        from data_analysis import DataAnalyzer
        print("‚úÖ DataAnalyzer: Classe criada com sucesso")
        
        # Testar testador de estacionariedade
        from stationarity import StationarityTester
        print("‚úÖ StationarityTester: Classe criada com sucesso")
        
        # Testar transformador de dados
        from transformation import DataTransformer
        print("‚úÖ DataTransformer: Classe criada com sucesso")
        
        # Testar modelos
        from models import TimeSeriesModels
        print("‚úÖ TimeSeriesModels: Classe criada com sucesso")
        
        # Testar avaliador
        from evaluation import ModelEvaluator
        print("‚úÖ ModelEvaluator: Classe criada com sucesso")
        
        # Testar visualizador
        from visualization import DataVisualizer
        print("‚úÖ DataVisualizer: Classe criada com sucesso")
        
        print("\n‚úÖ Todas as funcionalidades b√°sicas est√£o funcionando!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro na funcionalidade b√°sica: {e}")
        return False


def main():
    """Fun√ß√£o principal de teste"""
    print("TESTE DOS M√ìDULOS")
    print("=" * 50)
    
    # Testar importa√ß√µes
    imports_ok = test_imports()
    
    if imports_ok:
        # Testar funcionalidade b√°sica
        functionality_ok = test_basic_functionality()
        
        if functionality_ok:
            print("\nüéâ Todos os testes passaram!")
            print("O projeto est√° configurado corretamente.")
        else:
            print("\n‚ö†Ô∏è  Alguns problemas foram encontrados na funcionalidade.")
    else:
        print("\n‚ùå Problemas de importa√ß√£o impedem o funcionamento.")
    
    print("\n" + "=" * 50)


if __name__ == "__main__":
    main()
